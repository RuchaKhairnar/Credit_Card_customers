library(dummies)
library(caret)
library(generics)
library("e1071")
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(randomForest)
library(effects)
library(e1071)
#drop 3 colnames
data1<-BankChurners[,c(-22,-23,-1)]
colnames(data1)
## Assigning binary values
data1$Attrition_Flag[data1$Attrition_Flag=="Existing Customer"]<-0
data1$Attrition_Flag[data1$Attrition_Flag=="Attrited Customer"]<-1
#Assigning binary values to gender
data1$Gender[data1$Gender=="M"]<-0
data1$Gender[data1$Gender=="F"]<-1
##Naming and changing the class of some of columns
data1<- data1 %>%
summarise("Attrition_Flag"=as.numeric(Attrition_Flag),
Customer_Age,
"Gender"=as.factor(Gender),
"Dependent_count"=as.factor(Dependent_count),
Education_Level,
Marital_Status,
Income_Category,
Card_Category,
Months_on_book,
Total_Relationship_Count,
Months_Inactive_12_mon,
Contacts_Count_12_mon,
Credit_Limit,
Total_Revolving_Bal,
Avg_Open_To_Buy,
Total_Amt_Chng_Q4_Q1,
Total_Trans_Amt,
Total_Trans_Ct,
Total_Ct_Chng_Q4_Q1,
Avg_Utilization_Ratio)
class(data1$Dependent_count)
#dividing the data into existed and attributed
data_exist<- data1 %>%
filter(Attrition_Flag==0)
data_attrit<- data1 %>%
filter(Attrition_Flag==1)
colnames(data1)
colnames(data1) <- make.unique(names(data1))
logit_train<- glm(Attrition_Flag~Dependent_count+
Total_Relationship_Count+
scale(Avg_Utilization_Ratio)+
scale(Total_Ct_Chng_Q4_Q1)+
scale(Total_Trans_Ct*Total_Trans_Amt)+
scale(Total_Revolving_Bal)+
scale(Months_Inactive_12_mon)+
scale(Contacts_Count_12_mon)+
Gender+
Income_Category+
Marital_Status+
#data1Married +
#data1Single+
#  Education_Level+
#`data1High School`+
#  data1Doctorate+
# data1Uneducated+
# pst_grad+
# data1Unknown+
#  Credit_Limit+
scale(Total_Ct_Chng_Q4_Q1)+
log(Avg_Open_To_Buy)*Credit_Limit
,data =train_data,family=binomial(link = "logit"))
summary(logit_train)
pred_model<- predict(logit_train,newdata = test_data,type = "response")
test_data$pred[pred_model<0.5]<-0
test_data$pred[pred_model<0.5]<-0
test_data$pred[pred_model>0.5]<-1
table(a1=test_data$pred,b=test_data$Attrition_Flag)
tp<-test_data$pred%>% factor()
td<-as.factor(test_data$Attrition_Flag)
mean(test_data$pred==test_data$Attrition_Flag)
summary(logit_train)
class(data1$Dependent_count)
##Naming and changing the class of some of columns
data1<- data1 %>%
summarise("Attrition_Flag"=as.numeric(Attrition_Flag),
Customer_Age,
"Gender"=as.factor(Gender),
"Dependent_count"=as.factor(Dependent_count),
Education_Level,
Marital_Status,
Income_Category,
Card_Category,
Months_on_book,
Total_Relationship_Count,
Months_Inactive_12_mon,
Contacts_Count_12_mon,
Credit_Limit,
Total_Revolving_Bal,
Avg_Open_To_Buy,
Total_Amt_Chng_Q4_Q1,
Total_Trans_Amt,
Total_Trans_Ct,
Total_Ct_Chng_Q4_Q1,
Avg_Utilization_Ratio)
class(data1$Gender)
##Naming and changing the class of some of columns
data1<- data1 %>%
summarise("Attrition_Flag"=as.numeric(Attrition_Flag),
Customer_Age,
"Gender"=as.factor(Gender),
"Dependent_count"=as.factor(Dependent_count),
Education_Level,
Marital_Status,
Income_Category,
Card_Category,
Months_on_book,
Total_Relationship_Count,
Months_Inactive_12_mon,
Contacts_Count_12_mon,
Credit_Limit,
Total_Revolving_Bal,
Avg_Open_To_Buy,
Total_Amt_Chng_Q4_Q1,
Total_Trans_Amt,
Total_Trans_Ct,
Total_Ct_Chng_Q4_Q1,
Avg_Utilization_Ratio)
class(data1$Gender)
logit_train<- glm(Attrition_Flag~Dependent_count+
Total_Relationship_Count+
scale(Avg_Utilization_Ratio)+
scale(Total_Ct_Chng_Q4_Q1)+
scale(Total_Trans_Ct*Total_Trans_Amt)+
scale(Total_Revolving_Bal)+
scale(Months_Inactive_12_mon)+
scale(Contacts_Count_12_mon)+
Gender+
Income_Category+
Marital_Status+
#data1Married +
#data1Single+
#  Education_Level+
#`data1High School`+
#  data1Doctorate+
# data1Uneducated+
# pst_grad+
# data1Unknown+
#  Credit_Limit+
scale(Total_Ct_Chng_Q4_Q1)+
log(Avg_Open_To_Buy)*Credit_Limit
,data =train_data,family=binomial(link = "logit"))
summary(logit_train)
pred_model<- predict(logit_train,newdata = test_data,type = "response")
qplot(pred_model)
plot(pred_model)
test_data$pred[pred_model<0.5]<-0
test_data$pred[pred_model>0.5]<-1
table(a1=test_data$pred,b=test_data$Attrition_Flag)
tp<-test_data$pred%>% factor()
td<-as.factor(test_data$Attrition_Flag)
mean(test_data$pred==test_data$Attrition_Flag)
logit_train<- glm(Attrition_Flag~
Dependent_count+
Total_Relationship_Count+
scale(Avg_Utilization_Ratio)+
scale(Total_Ct_Chng_Q4_Q1)+
scale(Total_Trans_Ct*Total_Trans_Amt)+
scale(Total_Revolving_Bal)+
scale(Months_Inactive_12_mon)+
scale(Contacts_Count_12_mon)+
Gender+
Income_Category+
# Marital_Status+
#data1Married +
#data1Single+
#  Education_Level+
#`data1High School`+
#  data1Doctorate+
# data1Uneducated+
# pst_grad+
# data1Unknown+
#  Credit_Limit+
scale(Total_Ct_Chng_Q4_Q1)+
log(Avg_Open_To_Buy)*Credit_Limit
,data =train_data,family=binomial(link = "logit"))
summary(logit_train)
pred_model<- predict(logit_train,newdata = test_data,type = "response")
qplot(pred_model)
plot(pred_model)
test_data$pred[pred_model<0.5]<-0
test_data$pred[pred_model>0.5]<-1
table(a1=test_data$pred,b=test_data$Attrition_Flag)
tp<-test_data$pred%>% factor()
td<-as.factor(test_data$Attrition_Flag)
mean(test_data$pred==test_data$Attrition_Flag)
pred_model<- predict(logit_train,newdata = test_data,type = "response")
qplot(pred_model)
plot(pred_model)
test_data$pred[pred_model<0.5]<-0
test_data$pred[pred_model>0.5]<-1
table(a1=test_data$pred,b=test_data$Attrition_Flag)
tp<-test_data$pred%>% factor()
td<-as.factor(test_data$Attrition_Flag)
mean(test_data$pred==test_data$Attrition_Flag)
logit_train<- glm(Attrition_Flag~
Dependent_count+
Total_Relationship_Count+
scale(Avg_Utilization_Ratio)+
scale(Total_Ct_Chng_Q4_Q1)+
scale(Total_Trans_Ct*Total_Trans_Amt)+
scale(Total_Revolving_Bal)+
scale(Months_Inactive_12_mon)+
scale(Contacts_Count_12_mon)+
Gender+
Income_Category+
# Marital_Status+
#data1Married +
#data1Single+
#  Education_Level+
#`data1High School`+
#  data1Doctorate+
# data1Uneducated+
# pst_grad+
# data1Unknown+
#  Credit_Limit+
scale(Total_Ct_Chng_Q4_Q1)+
log(Avg_Open_To_Buy)*Credit_Limit
,data =train_data,family=binomial(link = "logit"))
summary(logit_train)
library(effects)
plot(allEffects(logit_train))
pred_model<- predict(logit_train,newdata = test_data,type = "response")
qplot(pred_model)
plot(pred_model)
test_data$pred[pred_model<0.5]<-0
test_data$pred[pred_model>0.5]<-1
table(a1=test_data$pred,b=test_data$Attrition_Flag)
tp<-test_data$pred%>% factor()
td<-as.factor(test_data$Attrition_Flag)
mean(test_data$pred==test_data$Attrition_Flag)
logit_train<- glm(Attrition_Flag~
Dependent_count+
Total_Relationship_Count+
scale(Avg_Utilization_Ratio)+
scale(Total_Ct_Chng_Q4_Q1)+
scale(Total_Trans_Ct*Total_Trans_Amt)+
scale(Total_Revolving_Bal)+
scale(Months_Inactive_12_mon)+
scale(Contacts_Count_12_mon)+
Gender+
Income_Category+
Marital_Status+
#data1Married +
#data1Single+
#  Education_Level+
#`data1High School`+
#  data1Doctorate+
# data1Uneducated+
# pst_grad+
# data1Unknown+
#  Credit_Limit+
scale(Total_Ct_Chng_Q4_Q1)+
log(Avg_Open_To_Buy)*Credit_Limit
,data =train_data,family=binomial(link = "logit"))
summary(logit_train)
library(effects)
plot(allEffects(logit_train))
pred_model<- predict(logit_train,newdata = test_data,type = "response")
qplot(pred_model)
plot(pred_model)
test_data$pred[pred_model<0.5]<-0
test_data$pred[pred_model>0.5]<-1
table(a1=test_data$pred,b=test_data$Attrition_Flag)
tp<-test_data$pred%>% factor()
td<-as.factor(test_data$Attrition_Flag)
mean(test_data$pred==test_data$Attrition_Flag)
logit_train<- glm(Attrition_Flag~
Dependent_count+
Total_Relationship_Count+
scale(Avg_Utilization_Ratio)+
scale(Total_Ct_Chng_Q4_Q1)+
scale(Total_Trans_Ct*Total_Trans_Amt)+
scale(Total_Revolving_Bal)+
scale(Months_Inactive_12_mon)+
scale(Contacts_Count_12_mon)+
Gender+
#Income_Category+
# Marital_Status+
scale(Total_Ct_Chng_Q4_Q1)+
log(Avg_Open_To_Buy)*Credit_Limit
,data =train_data,family=binomial(link = "logit"))
summary(logit_train)
pred_model<- predict(logit_train,newdata = test_data,type = "response")
qplot(pred_model)
plot(pred_model)
test_data$pred[pred_model<0.5]<-0
test_data$pred[pred_model>0.5]<-1
table(a1=test_data$pred,b=test_data$Attrition_Flag)
tp<-test_data$pred%>% factor()
td<-as.factor(test_data$Attrition_Flag)
mean(test_data$pred==test_data$Attrition_Flag)
confusionMatrix(tp,td)
confusionMatrix(tp,td)
mean(test_data$pred==test_data$Attrition_Flag)
logit_train<- glm(Attrition_Flag~
Dependent_count+
Total_Relationship_Count+
scale(Avg_Utilization_Ratio)+
scale(Total_Ct_Chng_Q4_Q1)+
scale(Total_Trans_Ct*Total_Trans_Amt)+
scale(Total_Revolving_Bal)+
scale(Months_Inactive_12_mon)+
scale(Contacts_Count_12_mon)+
Gender+
#Income_Category+
# Marital_Status+
scale(Total_Ct_Chng_Q4_Q1)+
log(Avg_Open_To_Buy)*Credit_Limit
,data =train_data,family=binomial(link = "logit"))
summary(logit_train)
pred_model<- predict(logit_train,newdata = test_data_1,type = "response")
qplot(pred_model)
plot(pred_model)
test_data_1$pred[pred_model<0.5]<-0
test_data_1$pred[pred_model>0.5]<-1
table(a1=test_data_1$pred,b=test_data_1$Attrition_Flag)
mean(test_data_1$pred==test_data_1$Attrition_Flag)
pred_model<- predict(logit_train,newdata = test_data_2,type = "response")
qplot(pred_model)
plot(pred_model)
test_data_2$pred[pred_model<0.5]<-0
test_data_2$pred[pred_model>0.5]<-1
table(a1=test_data_2$pred,b=test_data_2$Attrition_Flag)
tp<-test_data_2$pred%>% factor()
td<-as.factor(test_data_2$Attrition_Flag)
mean(test_data_2$pred==test_data_2$Attrition_Flag)
ggplot()+
geom_density(mapping = aes(x=log(Avg_Open_To_Buy)),colour="blue",data =data_exist)+
geom_density(mapping = aes(x=log(Avg_Open_To_Buy)),colour="red", data =data_attrit)
plot(allEffects(logit_train))
##Now we predict and check the accuracy of the model
pred_model<- predict(logit_train,newdata = test_data,type = "response")
qplot(pred_model)
plot(pred_model)
## Here we define any value less than 0.5 to be predicted as 0 and grete
test_data$pred[pred_model<=0.5]<-0
test_data$pred[pred_model>0.5]<-1
table(a1=test_data$pred,b=test_data$Attrition_Flag)
tp<-test_data$pred%>% factor()
td<-as.factor(test_data$Attrition_Flag)
mean(test_data$pred==test_data$Attrition_Flag)
test_pred<-test_data$pred%>% factor()
test_AF<-as.factor(test_data$Attrition_Flag)
mean(test_data$pred==test_data$Attrition_Flag)
confusionMatrix(test_pred,test_AF)
confusionMatrix(test_pred,test_AF)
F_meas(test_pred,test_AF)
recall(test_pred,test_AF)
precision(test_pred,test_AF)
barplot(prop.table(table("f"=data1$Attrition_Flag,"G"=data1$Card_Category)))
densityplot(data1$Total_Amt_Chng_Q4_Q1)
##Here we use decision tree model
tree_model<-rpart(Attrition_Flag~.,data =train_data,method = "class")
summary(tree_model)
plot(tree_model)
fancyRpartPlot(tree_model)
?fancyRpartPlot
fancyRpartPlot(tree_model, palettes=c("Greys", "Oranges"),sub = NA)
fancyRpartPlot(tree_model, palettes=c("Greys", "Oranges","red"),sub = NA)
fancyRpartPlot(tree_model,sub = NA)
##Here we use decision tree model
tree_model<-rpart(Attrition_Flag~.,data =train_data,method = "class")
##Here we use decision tree model
tree_model<-rpart(Attrition_Flag~.,data =train_data,method = "response")
##Here we use decision tree model
tree_model<-rpart(Attrition_Flag~.,data =train_data,method = "class")
summary(tree_model)
#
pred_tree_model<-predict(tree_model,test_data_2,type = "response")
#
pred_tree_model<-predict(tree_model,test_data_2,type = "class")
table(pred_tree_model,test_data_2$Attrition_Flag)
mean(pred_tree_model==test_data_2$Attrition_Flag)
plot(pred_tree_model)
##Now we predict and check the accuracy of the model
pred_model<- predict(logit_train,newdata = test_data,type = "class")
##Now we predict and check the accuracy of the model
pred_model<- predict(logit_train,newdata = test_data,type = "response")
sum(is.na(train_data$Education_Level))
my_forest<-randomForest(as.factor(Attrition_Flag)~.,data =train_data,importance=TRUE,ntree=1000)
varImpPlot(my_forest)
predict_forest<- predict(my_forest,test_data_2)
mean(predict_forest==test_data_2$Attrition_Flag)
#Then predicting the model using test data
pred_tree_model<-predict(tree_model,test_data,type = "class")
plot(pred_tree_model)
table(pred_tree_model,test_data$Attrition_Flag)
##calculating the accuracy.
mean(pred_tree_model==test_data$Attrition_Flag)
sum(is.na(train_data$Education_Level))
##Using Random Forest model
my_forest<-randomForest(as.factor(Attrition_Flag)~.,data =train_data,importance=TRUE,ntree=1000)
varImpPlot(my_forest)
##predicting model
predict_forest<- predict(my_forest,test_data)
mean(predict_forest==test_data$Attrition_Flag)
kn3<-knn3(as.factor(Attrition_Flag)~.,data =train_data,k=7,distance="")
summary(kn3)
?knn3
## Now using K-nearest neighbours
kn3<-knn3(as.factor(Attrition_Flag)~.,data =train_data,k=7,prob=TRUE)
summary(kn3)
kn3
## Now using K-nearest neighbours
kn3<-knn3(as.factor(Attrition_Flag)~.,data =train_data,k=5,prob=TRUE)
kn3
## Now using K-nearest neighbours
kn3<-knn3(as.factor(Attrition_Flag)~.,data =train_data,k=1,prob=TRUE)
kn3
## Now using K-nearest neighbours
kn3<-knn3(as.factor(Attrition_Flag)~.,data =train_data,k=7,prob=TRUE,cl)
l
## Now using K-nearest neighbours
kn3<-knn3(as.factor(Attrition_Flag)~.,data =train_data,k=7,prob=TRUE,cl)
## Now using K-nearest neighbours
kn3<-knn3(as.factor(Attrition_Flag)~.,data =train_data,k=7,prob=TRUE)
kn3
## Now using K-nearest neighbours
kn3<-knn3(as.factor(Attrition_Flag)~.,data =train_data,k=7)#,prob=TRUE)
kn3
summary(kn3)
## Now using K-nearest neighbours
kn3<-knn3(as.factor(Attrition_Flag)~.,data =train_data,k=7,prob=TRUE)
summary(kn3)
attributes(kn3)
## Then we predict using kn3
kn3<-predict(kn3,test_data,type = "class")
confusionMatrix(data = as.factor(kn3), reference = td)
## Then we predict using kn3
kn3<-predict(kn3,test_data_1,type = "class")
## Now using K-nearest neighbours
kn3<-knn3(as.factor(Attrition_Flag)~.,data =train_data,k=7,prob=TRUE)
summary(kn3)
## Then we predict using kn3
kn3<-predict(kn3,test_data_1,type = "class")
## we predict using kn3
kn3<-predict(kn3,test_data,type = "class")
confusionMatrix(data = as.factor(kn3), reference = td)
## Now using K-nearest neighbours
kn3<-knn3(as.factor(Attrition_Flag)~.,data =train_data,k=7,prob=TRUE)
summary(kn3)
## we predict using kn3
kn3_predict<-predict(kn3,test_data,type = "class")
confusionMatrix(data = as.factor(kn3), reference = td)
## Now using K-nearest neighbours
kn3<-knn3(as.factor(Attrition_Flag)~.,data =train_data,k=7,prob=TRUE)
summary(kn3)
## we predict using kn3
kn3_predict<-predict(kn3,test_data,type = "class")
confusionMatrix(data = as.factor(kn3_predict), reference = td)
confusionMatrix(data = as.factor(kn3_predict), reference = test_AF)
## we predict using kn3
kn3_predict<-predict(kn3,test_data,type = "class")
confusionMatrix(data = as.factor(kn3_predict), reference = test_AF)
##Calculating accuracy
mean(kn3_predict==test_data$Attrition_Flag)
# Fitting model SVM
fit <-svm(Attrition_Flag ~., data = train_data)
fit
summary(fit)
# Fitting model SVM
svm_model <-svm(Attrition_Flag ~., data = train_data)
# Fitting model SVM
svm_model <-svm(Attrition_Flag ~., data = train_data)
summary(svm_model)
#Predict Output
predicted_SVM<- predict(fit,test_data_2,type="class")
#Predict Output
predicted_SVM<- predict(svm_model,test_data,type="class")
test_data$pred1[predicted<0.5]<-0
test_data$pred1[predicted>0.5]<-1
test_data$pred1[predicted_SVM<0.5]<-0
test_data$pred1[predicted_SVM>0.5]<-1
table(a1=test_data$pred1,b=test_data$Attrition_Flag)
mean(test_data$pred1==test_data$Attrition_Flag)
View(test_data)
confusionMatrix(data=predicted_SVM,reference = tp_svm)
tp_svm<-test_data$pred1%>% factor()
confusionMatrix(data=predicted_SVM,reference = tp_svm)
levels(tp_svm)
confusionMatrix(data=test_data$pred1,reference = tp_svm)
levels(test_data$pred1)
confusionMatrix(data=as.factor(test_data$pred1),reference = tp_svm)
tp_svm<-test_data$pred1%>% factor()
confusionMatrix(data= as.factor(predicted_SVM) ,reference =tp_svm )
levels(predicted_SVM)
levels(as.factor(predicted_SVM))
confusionMatrix(data= test_data$pred1 ,reference = test_data$Attrition_Flag )
confusionMatrix(data= tp_svm ,reference = test_data$Attrition_Flag )
confusionMatrix(data= tp_svm ,reference = as.factor(test_data$Attrition_Flag ))
plot(predicted_SVM)
plot(predicted_SVM)
## Now using K-nearest neighbours
kn3<-knn3(as.factor(Attrition_Flag)~.,data =train_data,k=7,prob=TRUE)
summary(kn3)
## we predict using kn3
kn3_predict<-predict(kn3,test_data,type = "class")
plot(kn3_predict)
plot(pred_tree_model)
plot(predict_forest)
